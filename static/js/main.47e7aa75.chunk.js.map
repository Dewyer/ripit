{"version":3,"sources":["utils/getWeb3.js","components/InputField.js","components/UsernameBox.js","components/Poster.js","components/PostContainer.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","InputField","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","text","onChangeText","bind","assertThisInitialized","txt","setState","target","value","onChange","multilined","react_default","createElement","InputMulti","typte","placeholder","height","width","Input","Component","styled","input","_templateObject","undefined","textarea","_templateObject2","UsernameBox","onChangeUsername","val","username","Container","InputField_InputField","div","UsernameBox_templateObject","Poster","onPost","Poster_Container","Button","onClick","Poster_templateObject","Poster_templateObject2","PostContainer","getComponentForPost","scrollToBottom","post","content","BodyParagraph","body","split","length","Himg","src","key","index","PostCont","PostHeader","UserName","style","color","time","list","scrollIntoView","_this2","listOfPosts","posts","map","PostContainer_Container","Lister","ref","el","PostContainer_templateObject","ul","PostContainer_templateObject2","_templateObject3","_templateObject4","p","_templateObject5","h1","_templateObject6","img","_templateObject7","App","storageValue","accounts","contract","latestIndex","componentDidMount","networkId","deployedNetwork","instance","newPostEvent","getPostByIndex","doPost","initPosts","getPostByTransaction","sent","eth","getAccounts","net","getId","RipitContract","networks","Contract","abi","address","events","NewPost","alert","error","pp","Date","parseInt","timeStamp","_hex","toTimeString","methods","getLatestIndex","from","latest","ii","push","getPost","setTimeout","_callee4","latestPosts","allP","_context4","t1","concat","now","send","r","JSON","stringify","App_Container","HeadCont","Icon","UsernameBox_UsernameBox","PostContainer_PostContainer","Poster_Poster","App_templateObject","App_templateObject2","App_templateObject3","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47e7aa75.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport styled from 'styled-components'\n\nexport default class InputField extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n        this.state = \n        {\n            text:\"\"\n        };\n\n\t\tthis.onChangeText = this.onChangeText.bind(this);\n\t}\n\n\tonChangeText(txt)\n\t{\n        //console.log(txt.target.value);\n        this.setState({text:txt.target.value});\n        this.props.onChange(txt.target.value);\n\t}\n\n\trender() {\n\n        if (this.props.multilined)\n        {\n            return(\n                <InputMulti typte=\"text\" placeholder={this.props.placeholder} height={this.props.height || 40} width={this.props.width || 200}  value={this.state.text} onChange={this.onChangeText}/>\n            );\n        }\n        else\n\t\treturn (\n            <Input typte=\"text\" placeholder={this.props.placeholder} height={this.props.height || 40} width={this.props.width || 200}  value={this.state.text} onChange={this.onChangeText}/>\n\t\t);\n\t}\n}\n\nconst Input = styled.input`\n    border: 1px solid black;\n    border-radius:20px;\n    height:${props => props.height == undefined ? \"40px\" : props.height+\"px\"};\n    width:${props => props.width == undefined ? \"200px\" : props.width+\"px\"};\n    padding:5px;\n    font-size:15pt;\n    outline-style:none;\n`\nconst InputMulti = styled.textarea`\n    border: 1px solid black;\n    border-radius:20px;\n    height:${props => props.height == undefined ? \"40px\" : props.height+\"px\"};\n    width:${props => props.width == undefined ? \"200px\" : props.width+\"px\"};\n    padding:10px;\n    font-size:15pt;\n    outline-style:none;\n`","import React, { Component } from \"react\";\nimport styled from 'styled-components'\nimport InputField from \"components/InputField\";\n\nexport default class UsernameBox extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.onChangeUsername = this.onChangeUsername.bind(this);\n\t}\n\n\tonChangeUsername(val)\n\t{\n\t\t//console.log(val);\n\t\tthis.setState({username:val});\n\t\tthis.props.onChangeUsername(val);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<h2>Pick a username:</h2>\n\t\t\t\t<InputField placeholder={\"Username\"} height={40} width={200} onChange={this.onChangeUsername}/>\t\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nconst Container = styled.div`\n\tdisplay:flex;\n\tjustify-content:space-around;\n\talign-items:center;\n\ttext-align:center;\n\tflex-direction:column;\n\twidth:220px;\n\theight:100px;\n`","import React, { Component } from \"react\";\nimport styled from 'styled-components'\nimport InputField from \"components/InputField\";\n\nexport default class Poster extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n        this.state = \n        {\n            text:\"\"\n        };\n\n        this.onChangeText = this.onChangeText.bind(this);\n        this.onPost = this.onPost.bind(this);\n\t}\n\n\tonChangeText(txt)\n\t{\n        //console.log(txt.target.value);\n        this.setState({text:txt});\n        //this.props.onChange(txt.target.value);\n    }\n    \n    onPost()\n    {\n        this.props.onPost(this.state.text);\n    }\n\n\trender() {\n\t\treturn (\n            <Container>\n                <InputField multilined={true} placeholder={\"Your post body goes here.\"} height={100} width={400}  value={this.state.text} onChange={this.onChangeText}/>\n                <Button onClick={this.onPost}>Post</Button>\n            </Container>\n\n        );\n\t}\n}\n\nconst Container = styled.div`\n    display:flex;\n    justify-content:center;\n    align-items:baseline;\n    flex-direction:column;\n`\nconst Button = styled.a`\n    display:flex;\n    justify-content:center;\n    align-items:center;\n    margin-top:15px;\n    height:30px;\n    width:100px;\n    background-color:#89DA59;\n    cursor: pointer;\n    border-radius:15px;\n    margin-bottom:15px;\n\n    &:hover\n    {\n        background-color:#a0ff68;\n    }\n`","import React, { Component } from \"react\";\nimport styled from 'styled-components'\nimport InputField from \"components/InputField\";\n\nexport default class PostContainer extends Component {\n\n\tconstructor(props) {\n        super(props);\n        this.getComponentForPost = this.getComponentForPost.bind(this);\n        this.scrollToBottom = this.scrollToBottom.bind(this);\n\t}\n\n    componentDidMount() {\n        this.scrollToBottom();\n    }\n    \n    componentDidUpdate() {\n        this.scrollToBottom();\n    }\n\n    getComponentForPost(post)\n    {\n        let content =<BodyParagraph>{post.body}</BodyParagraph>;\n        if (post.body.split(\"#img \").length == 2)\n        {\n            content = <Himg src={post.body.split(\"#img \")[1]}/>;\n        }\n        return(\n            <li key={post.index}>\n                <PostCont>\n                    <PostHeader><UserName>{post.username}</UserName><h4 style={{color:\"white\"}}>{post.time}</h4></PostHeader>\n                    {content}\n                </PostCont>\n            </li>\n        );\n    }\n\n    scrollToBottom() {\n        console.log(\"sc \"+this.list.scrollIntoView)\n        //this.list.scrollIntoView({ behavior: 'smooth' });\n    }\n\n\trender() {\n        const listOfPosts = this.props.posts.map(this.getComponentForPost);\n\n\t\treturn (\n\t\t\t<Container>\n                <Lister ref={el=>this.list = el}>\n                    {listOfPosts}\n                </Lister>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nconst Container = styled.div`\n\tdisplay:flex;\n\tjustify-content:space-around;\n\talign-items:center;\n\ttext-align:center;\n\tflex-direction:column;\n\twidth:620px;\n    margin-top:15px;\n    margin-bottom:15px;\n`\n\n\nconst Lister = styled.ul`\n    margin:0px;\n    height:auto;\n    overflow-y:auto;\n    list-style-type: none;\n    padding:0;\n    width:100%;\n`\nconst PostCont = styled.div`\n    display:flex;\n    justify-content:center;\n    align-items:center;\n    flex-direction:column;\n    background-color: #FF420E;\n    margin-bottom:15px;\n    width:100%;\n    border-radius:15px;\n`\n\nconst PostHeader = styled.div`\n    display:flex;\n    justify-content:space-between;\n    width:80%;\n    align-items:center;\n    flex-direction:row;\n`\n\nconst BodyParagraph = styled.p`\n    text-align:left;\n    width:80%;\n    color:white;\n    font-size:20px;\n    word-wrap: break-word;\n`\n\nconst UserName = styled.h1`\n    text-align:left;\n    width:80%;\n    color:white;\n    font-size: 26px;\n\n`\n\nconst Himg = styled.img`\n    padding:10px;\n    display: block;\n    max-width:300px;\n    max-height:300px;\n    width: auto;\n    height: auto;\n\n`\n","import React, { Component } from \"react\";\nimport RipitContract from \"./contracts/Ripit.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport styled from 'styled-components'\nimport UsernameBox from \"components/UsernameBox\";\nimport Poster from \"components/Poster\";\nimport PostContainer  from \"components/PostContainer\";\n\nexport default class App extends Component {\n\tstate = {\n\t\tstorageValue: 0, \n\t\tweb3: null, \n\t\taccounts: null, \n\t\tcontract: null, \n\t\tlatestIndex: 0,\n\t\tusername:\"\",\n\t\tposts: [ ]\n\t};\n\n\tcomponentDidMount = async () => {\n\t\tthis.newPostEvent = this.newPostEvent.bind(this);\n\t\tthis.getPostByIndex = this.getPostByIndex.bind(this);\n\t\tthis.onChangeUsername = this.onChangeUsername.bind(this);\n\t\tthis.doPost = this.doPost.bind(this);\n\t\tthis.initPosts = this.initPosts.bind(this);\n\t\tthis.getPostByTransaction = this.getPostByTransaction.bind(this);\n\n\t\ttry {\n\t\t\t// Get network provider and web3 instance.\n\t\t\tconst web3 = await getWeb3();\n\n\t\t\t// Use web3 to get the user's accounts.\n\t\t\tconst accounts = await web3.eth.getAccounts();\n\n\t\t\t// Get the contract instance.\n\t\t\tconst networkId = await web3.eth.net.getId();\n\t\t\tconst deployedNetwork = RipitContract.networks[networkId];\n\t\t\tconst instance = new web3.eth.Contract(\n\t\t\t\tRipitContract.abi,\n\t\t\t\tdeployedNetwork && deployedNetwork.address,\n\t\t\t);\n\n\t\t\t//add: 0x1145797DdA973a7EB1a9C503e08C4f7E1E8DFE08\n\t\t\t// Set web3, accounts, and contract to the state, and then proceed with an\n\t\t\t// example of interacting with the contract's methods.\n\n\t\t\t//console.log(JSON.stringify(instance.events));\n\t\t\tinstance.events.NewPost(null,(index) => { this.newPostEvent(index) })\n\n\t\t\tthis.setState({ web3, accounts, contract: instance,posts: [ ] }, this.initPosts);\n\n\t\t} catch (error) {\n\t\t\t// Catch any errors for any of the above operations.\n\t\t\talert(\n\t\t\t\t`Failed to load web3, accounts, or contract. Check console for details.`,\n\t\t\t);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\tgetPostByTransaction(post)\n\t{\n\t\tlet pp = {};\n\t\tpp.body = post.body;\n\t\tpp.username = post.username;\n\t\t//console.log(JSON.stringify(post));\n\t\tpp.time = (new Date(parseInt(post.timeStamp._hex))).toTimeString().split(\" \")[0];\n\t\treturn pp;\n\t}\n\n\tasync initPosts()\n\t{\n\t\tlet latest = await this.state.contract.methods.getLatestIndex().call({ from: this.state.accounts[0] });\n\t\tlet initPosts =  [ ];\n\t\tfor(let ii = 0; ii < latest;ii++)\n\t\t{\n\t\t\tlet post =this.getPostByTransaction(await this.getPostByIndex(ii));\n\t\t\tpost.index = ii;\n\t\t\tinitPosts.push(post);\n\t\t}\n\t\tthis.setState({latestIndex:latest,posts:initPosts});\n\t}\n\n\tasync getPostByIndex(index)\n\t{\n\t\tlet post = await this.state.contract.methods.getPost(index).call({ from: this.state.accounts[0] });\n\t\t//console.log(JSON.stringify(post));\n\t\treturn post;\n\n\t}\n\n\tasync newPostEvent(index) {\n\t\tsetTimeout(async ()=> {\n\t\t\tconsole.log(\"now\")\n\t\t\tlet latest = await this.state.contract.methods.getLatestIndex().call({ from: this.state.accounts[0] });\n\t\t\tconsole.log(\"new post: \" + this.state.latestIndex+\" / \"+latest);\n\t\t\tlet latestPosts =  [ ];\n\t\t\tfor(let ii = parseInt(this.state.latestIndex); ii < latest;ii++)\n\t\t\t{\n\t\t\t\tconsole.log(\"kkeeek \"+ii);\n\t\t\t\tlet post = this.getPostByTransaction(await this.getPostByIndex(ii));\n\t\t\t\tpost.index = ii;\n\t\t\t\tlatestPosts.push(post);\n\t\t\t}\n\t\t\tlet allP = this.state.posts.concat(latestPosts);\n\t\t\tthis.setState({posts:allP,latestIndex:latest});\n\t\t},1);\n\t}\n\n\tonChangeUsername(txt)\n\t{\n\t\tthis.setState({username:txt});\n\t}\n\n\tasync doPost(post)\n\t{\n\t\t//console.log(post);\n\t\tlet r = await this.state.contract.methods.post(this.state.username,post,Date.now()).send({from:this.state.accounts[0]});\n\t\tconsole.log(JSON.stringify(r));\n\t}\n\n\trender() {\n\t\tif (!this.state.web3) {\n\t\t\treturn <div>Loading Web3, accounts, and contract...</div>;\n\t\t}\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<HeadCont><Icon src=\"/ic.png\"/><h1>RIPPIT</h1></HeadCont>\n\t\t\t\t<UsernameBox onChangeUsername={this.onChangeUsername}/>\n\t\t\t\t<PostContainer posts={this.state.posts}/>\n\t\t\t\t<Poster onPost={this.doPost}/>\n\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nconst Container = styled.div`\n\tdisplay:flex;\n\tjustify-content:flex-start;\n\talign-items:center;\n\ttext-align:center;\n\tflex-direction:column;\n\twidth:100vw;\n\theight:100vh;\n`\nconst HeadCont = styled.div`\n\tdisplay:flex;\n\tjustify-content:center;\n\talign-items:center;\n\ttext-align:center;\n\tflex-direction:row;\n`\nconst Icon = styled.img`\n\twidth:40px;\n\theight:40px;\n\tmargin-right:15px;\n`\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}